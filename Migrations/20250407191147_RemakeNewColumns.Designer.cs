// <auto-generated />
using System;
using ApiPortalEtico.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ApiPortalEtico.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250407191147_RemakeNewColumns")]
    partial class RemakeNewColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.Evidencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DondeObtener")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EntregaFisica")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IrregularityReportId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IrregularityReportId")
                        .IsUnique();

                    b.ToTable("Evidencias");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.Involucrado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IrregularityReportId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Otro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IrregularityReportId");

                    b.ToTable("Involucrados");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.IrregularityReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AceptaTerminos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Anonimo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AreaOtro")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Beneficios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cargo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ComoConocen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComoOcultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conocimiento")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConocimientoPrevio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CorreoContacto")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detalles")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvolucraExternos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Ocultado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtroContacto")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuienesConocen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuienesExternos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuienesOcultan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelacionGrupo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Testigos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoIrregularidad")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("IrregularityReports");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.Ubicacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IrregularityReportId")
                        .HasColumnType("int");

                    b.Property<string>("Pais")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sede")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IrregularityReportId")
                        .IsUnique();

                    b.ToTable("Ubicaciones");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.Evidencia", b =>
                {
                    b.HasOne("ApiPortalEtico.Domain.Entities.IrregularityReport", "IrregularityReport")
                        .WithOne("Evidencia")
                        .HasForeignKey("ApiPortalEtico.Domain.Entities.Evidencia", "IrregularityReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IrregularityReport");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.Involucrado", b =>
                {
                    b.HasOne("ApiPortalEtico.Domain.Entities.IrregularityReport", "IrregularityReport")
                        .WithMany("Involucrados")
                        .HasForeignKey("IrregularityReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IrregularityReport");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.Ubicacion", b =>
                {
                    b.HasOne("ApiPortalEtico.Domain.Entities.IrregularityReport", "IrregularityReport")
                        .WithOne("Ubicacion")
                        .HasForeignKey("ApiPortalEtico.Domain.Entities.Ubicacion", "IrregularityReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IrregularityReport");
                });

            modelBuilder.Entity("ApiPortalEtico.Domain.Entities.IrregularityReport", b =>
                {
                    b.Navigation("Evidencia")
                        .IsRequired();

                    b.Navigation("Involucrados");

                    b.Navigation("Ubicacion")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
